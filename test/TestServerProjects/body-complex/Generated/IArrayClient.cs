// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using body_complex.Models;

namespace body_complex
{
    /// <summary> The Array service client. </summary>
    public partial interface IArrayClient
    {
        /// <summary> Get complex types with array property. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<ArrayWrapper>> GetValidAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with array property. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ArrayWrapper> GetValid(CancellationToken cancellationToken = default);

        /// <summary> Put complex types with array property. </summary>
        /// <param name="complexBody"> Please put an array with 4 items: &quot;1, 2, 3, 4&quot;, &quot;&quot;, null, &quot;&amp;S#$(*Y&quot;, &quot;The quick brown fox jumps over the lazy dog&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response> PutValidAsync(ArrayWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Put complex types with array property. </summary>
        /// <param name="complexBody"> Please put an array with 4 items: &quot;1, 2, 3, 4&quot;, &quot;&quot;, null, &quot;&amp;S#$(*Y&quot;, &quot;The quick brown fox jumps over the lazy dog&quot;. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutValid(ArrayWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Get complex types with array property which is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<ArrayWrapper>> GetEmptyAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with array property which is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ArrayWrapper> GetEmpty(CancellationToken cancellationToken = default);

        /// <summary> Put complex types with array property which is empty. </summary>
        /// <param name="complexBody"> Please put an empty array. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response> PutEmptyAsync(ArrayWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Put complex types with array property which is empty. </summary>
        /// <param name="complexBody"> Please put an empty array. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutEmpty(ArrayWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Get complex types with array property while server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<ArrayWrapper>> GetNotProvidedAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with array property while server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ArrayWrapper> GetNotProvided(CancellationToken cancellationToken = default);
    }
}
