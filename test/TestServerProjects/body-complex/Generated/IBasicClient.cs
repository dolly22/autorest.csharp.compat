// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using body_complex.Models;

namespace body_complex
{
    /// <summary> The Basic service client. </summary>
    public partial interface IBasicClient
    {
        /// <summary> Get complex type {id: 2, name: &apos;abc&apos;, color: &apos;YELLOW&apos;}. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<Basic>> GetValidAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex type {id: 2, name: &apos;abc&apos;, color: &apos;YELLOW&apos;}. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Basic> GetValid(CancellationToken cancellationToken = default);

        /// <summary> Please put {id: 2, name: &apos;abc&apos;, color: &apos;Magenta&apos;}. </summary>
        /// <param name="complexBody"> Please put {id: 2, name: &apos;abc&apos;, color: &apos;Magenta&apos;}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response> PutValidAsync(Basic complexBody, CancellationToken cancellationToken = default);

        /// <summary> Please put {id: 2, name: &apos;abc&apos;, color: &apos;Magenta&apos;}. </summary>
        /// <param name="complexBody"> Please put {id: 2, name: &apos;abc&apos;, color: &apos;Magenta&apos;}. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutValid(Basic complexBody, CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type that is invalid for the local strong type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<Basic>> GetInvalidAsync(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type that is invalid for the local strong type. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Basic> GetInvalid(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type that is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<Basic>> GetEmptyAsync(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type that is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Basic> GetEmpty(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type whose properties are null. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<Basic>> GetNullAsync(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type whose properties are null. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Basic> GetNull(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type while the server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<Basic>> GetNotProvidedAsync(CancellationToken cancellationToken = default);

        /// <summary> Get a basic complex type while the server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<Basic> GetNotProvided(CancellationToken cancellationToken = default);
    }
}
