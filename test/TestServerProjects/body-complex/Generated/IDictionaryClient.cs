// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Threading;
using System.Threading.Tasks;
using Azure;
using body_complex.Models;

namespace body_complex
{
    /// <summary> The Dictionary service client. </summary>
    public partial interface IDictionaryClient
    {
        /// <summary> Get complex types with dictionary property. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<DictionaryWrapper>> GetValidAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DictionaryWrapper> GetValid(CancellationToken cancellationToken = default);

        /// <summary> Put complex types with dictionary property. </summary>
        /// <param name="complexBody"> Please put a dictionary with 5 key-value pairs: &quot;txt&quot;:&quot;notepad&quot;, &quot;bmp&quot;:&quot;mspaint&quot;, &quot;xls&quot;:&quot;excel&quot;, &quot;exe&quot;:&quot;&quot;, &quot;&quot;:null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response> PutValidAsync(DictionaryWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Put complex types with dictionary property. </summary>
        /// <param name="complexBody"> Please put a dictionary with 5 key-value pairs: &quot;txt&quot;:&quot;notepad&quot;, &quot;bmp&quot;:&quot;mspaint&quot;, &quot;xls&quot;:&quot;excel&quot;, &quot;exe&quot;:&quot;&quot;, &quot;&quot;:null. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutValid(DictionaryWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property which is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<DictionaryWrapper>> GetEmptyAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property which is empty. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DictionaryWrapper> GetEmpty(CancellationToken cancellationToken = default);

        /// <summary> Put complex types with dictionary property which is empty. </summary>
        /// <param name="complexBody"> Please put an empty dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response> PutEmptyAsync(DictionaryWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Put complex types with dictionary property which is empty. </summary>
        /// <param name="complexBody"> Please put an empty dictionary. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response PutEmpty(DictionaryWrapper complexBody, CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property which is null. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<DictionaryWrapper>> GetNullAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property which is null. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DictionaryWrapper> GetNull(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property while server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Task<Response<DictionaryWrapper>> GetNotProvidedAsync(CancellationToken cancellationToken = default);

        /// <summary> Get complex types with dictionary property while server doesn&apos;t provide a response payload. </summary>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<DictionaryWrapper> GetNotProvided(CancellationToken cancellationToken = default);
    }
}
